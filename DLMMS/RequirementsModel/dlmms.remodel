UseCaseModel DLMMS {

	UC::uploadModel definedBySSD(UploadModelSSD) relatedService(UploadModelService)
	UC::deleteModel
	UC::searchModel
	UC::manageModelVersion include addVersionTag, changeVersionTag, deleteVersionTag
	UC::downloadModel
	UC::deployModel
	UC::stopOnlineModel extend modifyRunningStatus
	UC::searchOnlineModel
	UC::addModelAccessPermission
	UC::updateModelAccessPermission definedBySSD(UpdateModelAccessPermissionSSD) relatedService(UpdateModelAccessPermissionService)
	UC::createModelSharingLink
	UC::updateModelSharingLinkAccessPermission
	UC::createOnlineModelAPI
	UC::updateOnlineModelAPI include checkRunningStatus
	UC::downloadModelBySharingLink
	UC::callOnlineModelAPI include checkRunningStatus definedBySSD(CallOnlineModelAPISSD) relatedService(CallOnlineModelAPIService)
	UC::checkRunningStatus
	UC::modifyRunningStatus definedBySSD(ModifyRunningStatusSSD) relatedService(ModifyRunningStatusService)
	UC::defineSamplingRule extend findDataSet
	UC::findDataSet
	UC::downloadDataSet
	UC::deleteDataSet
	UC::addVersionTag
	UC::changeVersionTag
	UC::deleteVersionTag

	Actor  ModelOwner {
		uploadModel
		searchModel
		deleteModel
		manageModelVersion
		downloadModel
		deployModel
		stopOnlineModel
		searchOnlineModel
		addModelAccessPermission
		createModelSharingLink
		updateModelSharingLinkAccessPermission
		createOnlineModelAPI
		updateOnlineModelAPI
		updateModelAccessPermission
		modifyRunningStatus
		checkRunningStatus
		defineSamplingRule
		findDataSet
		downloadDataSet
		deleteDataSet
	}

	Actor  ModelUser {
		downloadModelBySharingLink
		callOnlineModelAPI
	}

	Interaction ModifyRunningStatusSSD {

		[Participants: ModelOwner ModifyRunningStatusService]

	}

	Interaction UpdateModelAccessPermissionSSD {

		[Participants: ModelOwner UpdateModelAccessPermissionService]

	}

	Interaction CallOnlineModelAPISSD {

		[Participants: ModelUser CallOnlineModelAPIService CheckRunningStatusService]

		CallMessage::CallOnlineModelAPISSDCallMessage1(callOnlineModelAsync CallOnlineModelAPISSDCallMessage1SendingEnd -> CallOnlineModelAPISSDExecution1StartEnd)
		ReturnMessage::CallOnlineModelAPISSDCallMessage1Return(CallOnlineModelAPISSDExecution1FinishEnd -> CallOnlineModelAPISSDCallMessage1ReturnReceivingEnd CallOnlineModelAPISSDCallMessage1)
		CallMessage::CallOnlineModelAPISSDCallMessage3(checkModelRunningStatus CallOnlineModelAPISSDCallMessage3SendingEnd -> CallOnlineModelAPISSDExecution2StartEnd)
		ReturnMessage::CallOnlineModelAPISSDCallMessage3Return(CallOnlineModelAPISSDExecution2FinishEnd -> CallOnlineModelAPISSDCallMessage3ReturnReceivingEnd CallOnlineModelAPISSDCallMessage3)
		CallMessage::CallOnlineModelAPISSDCallMessage5(awaitCallResult CallOnlineModelAPISSDCallMessage5SendingEnd -> CallOnlineModelAPISSDExecution3StartEnd)
		ReturnMessage::CallOnlineModelAPISSDCallMessage5Return(CallOnlineModelAPISSDExecution3FinishEnd -> CallOnlineModelAPISSDCallMessage5ReturnReceivingEnd CallOnlineModelAPISSDCallMessage5)
		CallMessage::CallOnlineModelAPISSDCallMessage7(getCallResult CallOnlineModelAPISSDCallMessage7SendingEnd -> CallOnlineModelAPISSDExecution4StartEnd)
		ReturnMessage::CallOnlineModelAPISSDCallMessage7Return(CallOnlineModelAPISSDExecution4FinishEnd -> CallOnlineModelAPISSDCallMessage7ReturnReceivingEnd CallOnlineModelAPISSDCallMessage7)

		Execution::CallOnlineModelAPISSDExecution1(CallOnlineModelAPIService CallOnlineModelAPISSDExecution1StartEnd CallOnlineModelAPISSDExecution1FinishEnd)
		Execution::CallOnlineModelAPISSDExecution2(CheckRunningStatusService CallOnlineModelAPISSDExecution2StartEnd CallOnlineModelAPISSDExecution2FinishEnd)
		Execution::CallOnlineModelAPISSDExecution3(CallOnlineModelAPIService CallOnlineModelAPISSDExecution3StartEnd CallOnlineModelAPISSDExecution3FinishEnd)
		Execution::CallOnlineModelAPISSDExecution4(CallOnlineModelAPIService CallOnlineModelAPISSDExecution4StartEnd CallOnlineModelAPISSDExecution4FinishEnd)

		MessageEnd::CallOnlineModelAPISSDCallMessage1SendingEnd(ModelUser CallOnlineModelAPISSDCallMessage1)
		ExecutionEnd::CallOnlineModelAPISSDExecution1StartEnd(CallOnlineModelAPIService CallOnlineModelAPISSDExecution1)
		MessageEnd::CallOnlineModelAPISSDCallMessage3SendingEnd(CallOnlineModelAPISSDExecution1 CallOnlineModelAPISSDCallMessage3)
		ExecutionEnd::CallOnlineModelAPISSDExecution2StartEnd(CheckRunningStatusService CallOnlineModelAPISSDExecution2)
		ExecutionEnd::CallOnlineModelAPISSDExecution2FinishEnd(CheckRunningStatusService CallOnlineModelAPISSDExecution2)
		MessageEnd::CallOnlineModelAPISSDCallMessage3ReturnReceivingEnd(CallOnlineModelAPISSDExecution1 CallOnlineModelAPISSDCallMessage3Return)
		ExecutionEnd::CallOnlineModelAPISSDExecution1FinishEnd(CallOnlineModelAPIService CallOnlineModelAPISSDExecution1)
		MessageEnd::CallOnlineModelAPISSDCallMessage1ReturnReceivingEnd(ModelUser CallOnlineModelAPISSDCallMessage1Return)
		MessageEnd::CallOnlineModelAPISSDCallMessage5SendingEnd(ModelUser CallOnlineModelAPISSDCallMessage5)
		ExecutionEnd::CallOnlineModelAPISSDExecution3StartEnd(CallOnlineModelAPIService CallOnlineModelAPISSDExecution3)
		ExecutionEnd::CallOnlineModelAPISSDExecution3FinishEnd(CallOnlineModelAPIService CallOnlineModelAPISSDExecution3)
		MessageEnd::CallOnlineModelAPISSDCallMessage5ReturnReceivingEnd(ModelUser CallOnlineModelAPISSDCallMessage5Return)
		MessageEnd::CallOnlineModelAPISSDCallMessage7SendingEnd(ModelUser CallOnlineModelAPISSDCallMessage7)
		ExecutionEnd::CallOnlineModelAPISSDExecution4StartEnd(CallOnlineModelAPIService CallOnlineModelAPISSDExecution4)
		ExecutionEnd::CallOnlineModelAPISSDExecution4FinishEnd(CallOnlineModelAPIService CallOnlineModelAPISSDExecution4)
		MessageEnd::CallOnlineModelAPISSDCallMessage7ReturnReceivingEnd(ModelUser CallOnlineModelAPISSDCallMessage7Return)

	}

	Interaction FindDatasetSSD {

		[Participants: ModelOwner FindDatasetService]

		CallMessage::FindDatasetSSDCallMessage1(selectModel FindDatasetSSDCallMessage1SendingEnd -> FindDatasetSSDExecution1StartEnd)
		ReturnMessage::FindDatasetSSDCallMessage1Return(FindDatasetSSDExecution1FinishEnd -> FindDatasetSSDCallMessage1ReturnReceivingEnd FindDatasetSSDCallMessage1)
		CallMessage::FindDatasetSSDCallMessage3(selectRule FindDatasetSSDCallMessage3SendingEnd -> FindDatasetSSDExecution2StartEnd)
		ReturnMessage::FindDatasetSSDCallMessage3Return(FindDatasetSSDExecution2FinishEnd -> FindDatasetSSDCallMessage3ReturnReceivingEnd FindDatasetSSDCallMessage3)
		CallMessage::FindDatasetSSDCallMessage5(getDataset FindDatasetSSDCallMessage5SendingEnd -> FindDatasetSSDExecution3StartEnd)
		ReturnMessage::FindDatasetSSDCallMessage5Return(FindDatasetSSDExecution3FinishEnd -> FindDatasetSSDCallMessage5ReturnReceivingEnd FindDatasetSSDCallMessage5)

		Execution::FindDatasetSSDExecution1(FindDatasetService FindDatasetSSDExecution1StartEnd FindDatasetSSDExecution1FinishEnd)
		Execution::FindDatasetSSDExecution2(FindDatasetService FindDatasetSSDExecution2StartEnd FindDatasetSSDExecution2FinishEnd)
		Execution::FindDatasetSSDExecution3(FindDatasetService FindDatasetSSDExecution3StartEnd FindDatasetSSDExecution3FinishEnd)

		MessageEnd::FindDatasetSSDCallMessage1SendingEnd(ModelOwner FindDatasetSSDCallMessage1)
		ExecutionEnd::FindDatasetSSDExecution1StartEnd(FindDatasetService FindDatasetSSDExecution1)
		ExecutionEnd::FindDatasetSSDExecution1FinishEnd(FindDatasetService FindDatasetSSDExecution1)
		MessageEnd::FindDatasetSSDCallMessage1ReturnReceivingEnd(ModelOwner FindDatasetSSDCallMessage1Return)
		MessageEnd::FindDatasetSSDCallMessage3SendingEnd(ModelOwner FindDatasetSSDCallMessage3)
		ExecutionEnd::FindDatasetSSDExecution2StartEnd(FindDatasetService FindDatasetSSDExecution2)
		ExecutionEnd::FindDatasetSSDExecution2FinishEnd(FindDatasetService FindDatasetSSDExecution2)
		MessageEnd::FindDatasetSSDCallMessage3ReturnReceivingEnd(ModelOwner FindDatasetSSDCallMessage3Return)
		MessageEnd::FindDatasetSSDCallMessage5SendingEnd(ModelOwner FindDatasetSSDCallMessage5)
		ExecutionEnd::FindDatasetSSDExecution3StartEnd(FindDatasetService FindDatasetSSDExecution3)
		ExecutionEnd::FindDatasetSSDExecution3FinishEnd(FindDatasetService FindDatasetSSDExecution3)
		MessageEnd::FindDatasetSSDCallMessage5ReturnReceivingEnd(ModelOwner FindDatasetSSDCallMessage5Return)

	}

	Service ModifyRunningStatusService {

	}

	Service UpdateModelAccessPermissionService {

		[Operation]
		updatePermission(permission)

	}

	Service CallOnlineModelAPIService {

		[Operation]
		callOnlineModelAsync(modelId, args)
		awaitCallResult(callId)
		getCallResult(callId)

	}

	Service FindDatasetService {

		[Operation]
		selectModel(modelId)
		selectRule(ruleId)
		getDataset(start, end)

	}

	Service CheckRunningStatusService {

		[Operation]
		checkModelRunningStatus(modelId)

	}

	Service DLMMSSystem {

	}

	Service ThirdPartyServices {

	}

	Contract UpdateModelAccessPermissionService::updatePermission(permission : String) : Boolean {

		definition:
			model:Model = Model.allInstance()->any(m:Model | m.AccessPermission = permission)

		precondition:
			true
		postcondition:
			true
	}

	// 下面是 CallOnlineModel 的相关合约
	Contract CallOnlineModelAPIService::callOnlineModelAsync(modelId: String, args: String): String {

		definition:
			model:Model = Model.allInstance()->any(m:Model | m.ModelId = modelId)

		precondition:
			true
		postcondition:
			if
				(model.oclIsUndefined() = false)
			then
				// TODO: how to call the method of another service
				self.ModelService = CheckRunningStatusService.checkModelRunningStatus and
				self.Args = args and
				result = self.generateCallId
			else
				result = ""
			endif
	}

	Contract CheckRunningStatusService::checkModelRunningStatus(modelId: String): ModelRunningService {

		definition:
			modelService:ModelRunningService = ModelRunningService.allInstance()->any(s:ModelRunningService | s.ModelId = modelId)

		precondition:
			true

		postcondition:
			if
				(modelService.oclIsUndefined() = false)
			then
				result = modelService
			else
				result = null
			endif
	}

	Contract CallOnlineModelAPIService::getCallResult(callId: String): String {

		precondition:
			self.checkCallId = true
		postcondition:
			result = self.queryCallResult
	}

	// 下面是 FindDataset 的相关合约
	Contract FindDatasetService::selectModel(modelId: String): Boolean {

		definition:
			model:Model = Model.allInstance()->any(m:Model | m.ModelId = modelId)

		precondition:
			true

		postcondition:
			if
				(model.oclIsUndefined() = false)
			then
				result = true
			else
				result = false
			endif
	}

	Contract FindDatasetService::selectRule(ruleId: String): Boolean {

		definition:
			modelService:ModelRunningService = ModelRunningService.allInstance()->any(s:ModelRunningService | s.ModelId = self.Model.ModelId and s.SamplingRuleId=ruleId)

		precondition:
			self.Model.oclIsUndefined() = false

		postcondition:
			if
				(modelService.oclIsUndefined() = false)
			then
				self.ModelService = modelService and
				result = true
			else
				result = false
			endif
	}

	Contract FindDatasetService::getDataset(start: Date, end: Date): DataSet {

		precondition:
			end > start
		postcondition:
			// TODO: fix this method
			result = self.ModelService.generateDataset
	}

}

DomainModel DLMMS {

	Entity ModelOwner extends User {
		OwnModelList : String

		[Refer]
		ModelOwnertoModel : Model Association
	}

	Entity ModelRunningService {
		RuningStatus : String
		ServiceId : String
		ServiceRunningTime : String
		SamplingRuleId : String
		ModelId : String

		[Refer]
		ModelRunningServicetoDataSet : DataSet Association
	}

	Entity ModelManager extends User {
		ManageModelList : String
	}

	Entity OutsideUser extends User {
		AccessPermission : String
	}

	Entity DataSet {
		DataSetID : String
		DataSetInfo : String
		DataSetDescription : String
		DataSetCreateTime : String
		DataSetSize : String
	}

	Entity Model {
		AccessPermission : String
		AccessLink : String
		AccessLinkState : String
		ModelDescription : String
		ModelContent : String
		ModelId : String

		[Refer]
		ModeltoModelManager : ModelManager Association
		ModeltoModelRunningService : ModelRunningService Association
	}

	Entity ModelList {
		ModelSize : String

		[Refer]
		ModelListtoModel : Model Association
	}

	Entity User {
		UserId : String
		UserName : String
	}

}

